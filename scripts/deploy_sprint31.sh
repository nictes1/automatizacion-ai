#!/bin/bash

# Script de deployment para Sprint 3.1: Pipeline encadenado OCR ‚Üí Chunking ‚Üí Embedding
# Ejecutar desde la ra√≠z del proyecto

set -e

echo "üöÄ Deploying Sprint 3.1: Pipeline encadenado OCR ‚Üí Chunking ‚Üí Embedding"

# Variables
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
VENV_PYTHON="${PROJECT_DIR}/.venv/bin/python"

# 1. Ejecutar migraciones SQL (√≠ndices opcionales)
echo "üóÑÔ∏è  Ejecutando migraciones SQL (√≠ndices opcionales)..."
if [ -f "${PROJECT_DIR}/sql/07_sprint31_indexes.sql" ]; then
    psql -d "${DATABASE_URL:-postgresql://localhost/pulpo}" -f "${PROJECT_DIR}/sql/07_sprint31_indexes.sql"
    echo "‚úÖ √çndices opcionales aplicados"
else
    echo "‚ö†Ô∏è  Archivo de √≠ndices no encontrado, saltando..."
fi

# 2. Verificar dependencias
echo "üìã Verificando dependencias..."
if ! $VENV_PYTHON -c "import anyio" 2>/dev/null; then
    echo "‚ö†Ô∏è  anyio no encontrado. Instalando..."
    $VENV_PYTHON -m pip install anyio
else
    echo "‚úÖ anyio encontrado"
fi

# 3. Ejecutar tests del pipeline
echo "üß™ Ejecutando tests del pipeline..."
if [ -f "${PROJECT_DIR}/tests/test_sprint31_pipeline.py" ]; then
    cd "$PROJECT_DIR"
    $VENV_PYTHON -m pytest tests/test_sprint31_pipeline.py -v
    echo "‚úÖ Tests del pipeline ejecutados"
else
    echo "‚ö†Ô∏è  Tests no encontrados, saltando..."
fi

# 4. Verificar que el scheduler est√° corriendo
echo "üîç Verificando estado del scheduler..."
if systemctl is-active --quiet pulpo-job-scheduler; then
    echo "‚úÖ Scheduler est√° corriendo"
else
    echo "‚ö†Ô∏è  Scheduler no est√° corriendo. Iniciando..."
    sudo systemctl start pulpo-job-scheduler
    sleep 2
    if systemctl is-active --quiet pulpo-job-scheduler; then
        echo "‚úÖ Scheduler iniciado correctamente"
    else
        echo "‚ùå Error al iniciar scheduler"
        exit 1
    fi
fi

# 5. Verificar endpoints del pipeline
echo "üîç Verificando endpoints del pipeline..."
if command -v curl &> /dev/null; then
    # Test de estad√≠sticas de jobs
    if curl -s -X GET "http://localhost:8003/admin/jobs/stats" \
       -H "X-Admin-Token: tu-token" | grep -q "job_stats"; then
        echo "‚úÖ Endpoint /admin/jobs/stats funcionando"
    else
        echo "‚ö†Ô∏è  Endpoint /admin/jobs/stats no responde (¬øservicio corriendo?)"
    fi
    
    # Test de pr√≥ximos jobs
    if curl -s -X GET "http://localhost:8003/admin/jobs/next" \
       -H "X-Admin-Token: tu-token" | grep -q "items"; then
        echo "‚úÖ Endpoint /admin/jobs/next funcionando"
    else
        echo "‚ö†Ô∏è  Endpoint /admin/jobs/next no responde"
    fi
else
    echo "‚ö†Ô∏è  curl no encontrado, saltando verificaci√≥n de endpoints"
fi

# 6. Mostrar comandos √∫tiles para el pipeline
echo ""
echo "üéâ Sprint 3.1 deployado exitosamente!"
echo ""
echo "üìã Comandos √∫tiles para el pipeline:"
echo "  # Ver logs del scheduler (pipeline completo)"
echo "  sudo journalctl -u pulpo-job-scheduler -f"
echo ""
echo "  # Estad√≠sticas del pipeline"
echo "  curl -X GET http://localhost:8003/admin/jobs/stats \\"
echo "    -H 'X-Admin-Token: tu-token'"
echo ""
echo "  # Pr√≥ximos jobs en el pipeline"
echo "  curl -X GET http://localhost:8003/admin/jobs/next \\"
echo "    -H 'X-Admin-Token: tu-token'"
echo ""
echo "  # Iniciar pipeline completo (OCR ‚Üí Chunking ‚Üí Embedding)"
echo "  curl -X POST http://localhost:8003/admin/ocr/run-once \\"
echo "    -H 'X-Admin-Token: tu-token'"
echo ""
echo "  # Ver m√©tricas del pipeline"
echo "  curl -X GET http://localhost:8003/metrics | grep -E '(jobs_processed_total|job_duration_seconds)'"
echo ""
echo "  # Ver DLQ si algo falla"
echo "  curl -X GET http://localhost:8003/admin/jobs/dlq \\"
echo "    -H 'X-Admin-Token: tu-token'"
echo ""
echo "üîß Configuraci√≥n del pipeline:"
echo "  - OCR: Extrae texto de documentos"
echo "  - Chunking: Divide texto en chunks (800 chars, overlap 150)"
echo "  - Embedding: Genera embeddings con Ollama"
echo "  - Encadenamiento: Autom√°tico con idempotencia por revisi√≥n"
echo "  - Retries: Backoff exponencial con jitter"
echo "  - DLQ: Para jobs fallidos"
echo ""
echo "üìä Monitoreo del pipeline:"
echo "  - Logs: journalctl -u pulpo-job-scheduler"
echo "  - Stats: /admin/jobs/stats endpoint"
echo "  - M√©tricas: /metrics endpoint"
echo "  - DLQ: /admin/jobs/dlq endpoint"
echo ""
echo "üéØ Funcionalidades Sprint 3.1:"
echo "  ‚úÖ Pipeline encadenado OCR ‚Üí Chunking ‚Üí Embedding"
echo "  ‚úÖ Ejecutores productivos para chunking y embedding"
echo "  ‚úÖ Idempotencia por revisi√≥n (external_key √∫nico)"
echo "  ‚úÖ Chunking inteligente con overlap"
echo "  ‚úÖ Embeddings en lotes para performance"
echo "  ‚úÖ M√©tricas completas del pipeline"
echo "  ‚úÖ √çndices optimizados para performance"
echo "  ‚úÖ Tests completos del pipeline"
echo ""
echo "üöÄ ¬°Pipeline completo funcionando!"
echo ""
echo "üí° Pr√≥ximos pasos sugeridos:"
echo "  - Monitorear m√©tricas de performance"
echo "  - Ajustar tama√±os de chunk seg√∫n necesidades"
echo "  - Configurar alertas para DLQ"
echo "  - Optimizar batch sizes para embeddings"
